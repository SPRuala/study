<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--声明映射文件的命名空间（区分用）-->
<mapper namespace="mapper.EmpMapper"> <!--往往和文件名一致（给文件里的所有操作起名）-->

    <!--Type里写要处理映射的类，字段名和属性名不一致的情况-->
    <!--id:处理主键和属性的映射关系-->
    <!--result:处理普通字段和属性的映射关系-->
    <!--association:处理多对一 property：要处理映射关系的属性名 javaType：property中属性的类型（此处是别名）-->
    <!--collection:处理一对多。（处理集合类型的属性）-->
    <!--column:映射关系中的字段名，必须是sql查出的某个字段-->
    <!--property:映射关系中的属性的属性名，必须是处理的实体类类型中的属性名-->
    <!--select:分布查询时写下一步sql唯一标识（包名+接口+方法名）-->
    <!--column(collection内):设置第二步查询的条件（由第一步查询结果而得）-->
    <!--fetchType:（在开启了全局延迟加载的环境下）设定该分布查询是立即加载还是延迟加载-->
    <!--ofType:集合中属性的类型。（泛型）-->
    <!--每个字段都要写-->



<!--————————————————————————————————————————————————————————————————————————————————————————————————————————-->
    <!--多对一查询-->
    <select id="getEmpAndDeptByEmpno" resultType="Emp"> <!--resultType不能正确映射员工部门dept-->
        select * from emp left join dept on emp.deptno=dept.dept_id WHERE empno=#{empno}
    </select>
            <!--处理方法-->
                <!--1.级联方式resultMap(一对多应对应集合。一对一对应对象)-->
    <resultMap id="getEmpAndDeptByEmpnoMapOne" type="Emp">
        <id column="empno" property="empno"/>
        <result column="mgr" property="mgr"/>
        <result column="deptno" property="deptno"/>
        <result column="ename" property="ename"/>
        <result column="job" property="job"/>
        <result column="hiredate" property="hiredate"/>
        <result column="sal" property="sal"/>
        <result column="comm" property="comm"/>
        <result column="dept_id" property="dept.deptId"/>
        <result column="dept_name" property="dept.deptName"/>
    </resultMap>
    <select id="getEmpAndDeptByEmpnoMethoudOne" resultMap="getEmpAndDeptByEmpnoMapOne">
        select * from emp left join dept on emp.deptno=dept.dept_id WHERE empno=#{empno}
    </select> <!--dept查询结果为dept='Dept{deptId=20, deptName='B'}'-->

                <!--2.association（处理实体类类型的属性）-->
        <resultMap id="getEmpAndDeptByEmpnoMapTwo" type="Emp">
            <!--先把Emp类中的属性进行映射-->
            <id column="empno" property="empno"/>
            <result column="mgr" property="mgr"/>
            <result column="deptno" property="deptno"/>
            <result column="ename" property="ename"/>
            <result column="job" property="job"/>
            <result column="hiredate" property="hiredate"/>
            <result column="sal" property="sal"/>
            <result column="comm" property="comm"/>
            <!--用association再把dept_id，dept_name和dept再进行映射（Dept类）-->
            <association property="dept" javaType="Dept">
                <id column="dept_id" property="deptId"/>
                <result column="dept_name" property="deptName"/>
            </association>
        </resultMap>
    <select id="getEmpAndDeptByEmpnoMethoudTwo" resultMap="getEmpAndDeptByEmpnoMapTwo">
        select * from emp left join dept on emp.deptno=dept.dept_id WHERE empno=#{empno}
    </select><!--dept查询结果为dept='Dept{deptId=20, deptName='B'}'-->

                <!--3.分步查询（多对一，一对多都可以处理）-->
    <resultMap id="getEmpAndDeptByStepMapThree" type="Emp">
        <id column="empno" property="empno"/>
        <result column="mgr" property="mgr"/>
        <result column="deptno" property="deptno"/>
        <result column="ename" property="ename"/>
        <result column="job" property="job"/>
        <result column="hiredate" property="hiredate"/>
        <result column="sal" property="sal"/>
        <result column="comm" property="comm"/>
        <association property="dept" select="mapper.DeptMapper.getEmpAndDeptByStepMethoudThreeSteptwo" column="deptno" fetchType="lazy">
        </association>
    </resultMap>
    <select id="getEmpAndDeptByStepMethoudThreeStepone" resultMap="getEmpAndDeptByStepMapThree">
        select * from emp where empno=#{empno}
    </select>
    <!--————————————————————————————————————————————————————————————————————————-->
    <!--一对多查询-->
    <!--通过分步查询查找部门信息和该部门所在的员工信息(第二步)-->
<select id="getDeptAndEmpByDeptIdSteptwo" resultType="Emp">
    select * from emp where deptno=#{deptno}
</select>

    <!--动态SQL————————————————————————————————————————————————————————————————————————————————-->
    <!--if：判断拼接条件，如果不是null和空字符串就拼到sql里。-->
    <!--test:判断语句。有效：标签中的有效，会拼到sql。无效不会拼到sql。-->
    <!--test里直接写属性名。 因为&&等是特殊字符，用and代替-->
    <select id="getEmpByCondition" resultType="Emp">
        select * from emp where
        <if test="empno!=null and empno!=''">
            empno=#{empno}
        </if>
        <if test="ename!=null and ename!=''">
           and ename=#{ename}
        </if>
    </select>
    <!--解决 后续条件不成立 有多余 and 问题-->
    <!--1.where 1=1(需在所有条件字段名前加and)-->
    <!--恒成立条件1=1：不影响查询结果，如果后面条件都不成立，也能保留一个成立条件。使where变得有意义-->
<select id="getEmpByConditionSolveAndProblemOne" resultType="Emp">
    select * from emp where 1=1
    <if test="empno!=0 and empno!=''">
        and empno=#{empno}
    </if>
    <if test="ename!=null and ename!=''">
        and ename=#{ename}
    </if>
</select>
    <!--2.where标签-->
    <!--where标签可以自动生成where关键字，并且自动去除多余的and-->
    <select id="getEmpByConditionSolveAndProblemTwo" resultType="Emp">
        select * from emp
        <where>
            <if test="empno!=0 and empno!=''">
                empno=#{empno}
            </if>
            <if test="ename!=null and ename!=''">
               and ename=#{ename}
            </if>
        </where>
    </select>
    <!--3.where标签不起作用-->
    <!--没有条件成立的情况下不会自动生成where-->
    <select id="getEmpByConditionSolveAndProblemThree" resultType="Emp">
        select *from emp
        <where>
            <if test="empno!=0 and empno!=''">
                empno=#{empno}
            </if>
            <if test="ename!=null and ename!=''">
                and ename=#{ename}
            </if>
        </where>
    </select>
    <!--trim语句-->
    <!--prefix:在choose标签内的语句之前添加东西-->
    <!--suffixOverrides：在内容之后删除东西-->
    <select id="getEmpByTrim" resultType="emp">
        select *from emp
        <trim suffixOverrides="and" prefix="where">
            <if test="empno!=0 and empno!=''">
                empno=#{empno} and
            </if>
            <if test="ename!=null and ename!=''">
                ename=#{ename} and
            </if>
        </trim>
    </select>
    <!--choose语句（多条件判断）-->
    <!--when、otherwise要写在choose标签内-->
    <!--when相当于case-->
    <!--otherwise：如果以上条件都不满足 执行otherwise的语句-->
    <select id="selectEmpByAnyParamChoose" resultType="Emp">
        select * from emp
        <where>
            <choose>
                <when test="empno!=0 and empno!=''">
                    and empno=#{empno}
                </when>
                <when test="ename!=null and ename!=''">
                    and ename=#{ename}
                </when>
                <when test="job!=null and job!=''">
                    and job=#{job}
                </when>
                <otherwise>
                </otherwise>
            </choose>
        </where>
    </select>
    <!--foreach标签（多用于批量操作）-->
    <!--如果传参为一个数组或集合 mybatis都会将其放入map集合   list：list为键,list集合为值   数组：Array为键,参数为值-->
    <!--1.批量添加-->
    <!--将集合进行遍历再将每个字段赋值-->
    <!--collection中写@Param中的值-->
    <!--item:集合中的每一条数据-->
    <!--separator 每次循环时,每行元素数据之间的分隔符 在拼接到sql语句中时自带前后空格-->
    <!--sql=insert into emp values (,,,,,),(,,,,,),(,,,,,)带括号一起循环多次-->
    <insert id="insertManyEmp">
        insert into emp values
        <foreach collection="emplist" item="emp" separator=",">
            (#{emp.empno},#{emp.ename},#{emp.job},#{emp.mgr},#{emp.hiredate},#{emp.sal},#{emp.comm},#{emp.deptno})
        </foreach>
    </insert>
    <!--2.批量删除-->
    <!--sql= delete from emp where empno in(,,,)不带括号只循环括号内的-->
    <delete id="deleteManyEmp">
        delete from emp where empno in
    <foreach collection="empnolist" item="empno" open="(" close=")" separator=",">
        #{empno}
    </foreach>
    </delete>
    <!--sql标签-->
    <!--将sql片段记录 后使用include进行引入-->
</mapper>